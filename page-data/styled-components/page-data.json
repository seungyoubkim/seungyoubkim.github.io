{"componentChunkName":"component---src-templates-blog-post-js","path":"/styled-components/","result":{"data":{"site":{"siteMetadata":{"title":"Seungyoub Kim Blog"}},"markdownRemark":{"id":"93fc75a0-cb96-5d93-94f7-2e39a4cebdda","excerpt":"⚠️ 해당 글의 내용과 예시 코드, 이미지는 모두 참고 자료에서 가져 와 정리 한 것입니다. 오늘은 CSS-in-JS 도구 중 현재 가장 많은 인기를 누리고 있는 styled-components 에 대한 기본적인 내용들에 대해 알아보도록 하겠습니다. CSS-in-JS 201…","html":"<blockquote>\n<p>⚠️ 해당 글의 내용과 예시 코드, 이미지는 모두 참고 자료에서 가져 와 정리 한 것입니다.</p>\n</blockquote>\n<p>오늘은 CSS-in-JS 도구 중 현재 가장 많은 인기를 누리고 있는 styled-components 에 대한 기본적인 내용들에 대해 알아보도록 하겠습니다.</p>\n<h1>CSS-in-JS</h1>\n<hr>\n<ul>\n<li>2014년 페이스북의 개발자인 Vjeux 는 CSS 에는 아래와 같은 문제점들이 있다고 발표하였습니다.\n<ul>\n<li><strong>Global namespace</strong>: 모든 스타일이 global에 선언되어 별도의 class 명명 규칙을 적용해야 하는 문제</li>\n<li><strong>Dependencies</strong>: css간의 의존관계를 관리하기 힘든 문제</li>\n<li><strong>Dead Code Elimination</strong>: 기능 추가, 변경, 삭제 과정에서 불필요한 CSS를 제거하기 어려운 문제</li>\n<li><strong>Minification</strong>: 클래스 이름의 최소화 문제</li>\n<li><strong>Sharing Constants</strong>: JS의 상태 값을 공유할 수 없는 문제</li>\n<li><strong>Non-deterministic Resolution</strong>: CSS 로드 순서에 따라 스타일 우선 순위가 달라지는 문제</li>\n<li><strong>Isolation</strong>: CSS와 JS가 분리된 탓에 상속에 따른 격리가 어려운 문제</li>\n</ul>\n</li>\n<li>그리고 페이스북에서는 위 문제를 해결하기 위해 컴포넌트 기반의 자바스크립트 인라인 스타일을 선택했다고 이야기 하였습니다.</li>\n<li>이렇게 자바스크립트 내부에 스타일을 삽입하는 방법론을 CSS-in-JS 라고 이야기합니다.</li>\n<li>발표에 관한 더 자세한 내용은 아래 링크를 참고해주세요.\n<ul>\n<li><a href=\"http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html\">http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html</a></li>\n</ul>\n</li>\n<li>이 발표를 시작으로 CSS-in-JS 가 주목받기 시작하며 이후로 다양한 CSS-in-JS 도구들이 생겨나기 시작했습니다.</li>\n</ul>\n<h1>styled-components</h1>\n<hr>\n<ul>\n<li>styled-components 는 CSS-in-JS 도구중 현재 가장 인기있는 라이브러리입니다.\n<ul>\n<li>이에 대한 대안으로는 emotion, styled-jsx 등이 있습니다.</li>\n</ul>\n</li>\n<li>styled-components 는 ES6의 tagged template literals 문법을 통해 스타일을 작성하도록 합니다.\n<ul>\n<li>tagged template literals 에 대하여는 아래에서 설명합니다.</li>\n</ul>\n</li>\n<li>styled-components 의 공식 문서에서는 아래와 같은 이점을 제공한다고 이야기합니다.\n<ul>\n<li><strong>Automatic critical CSS</strong>: styled-components 는 페이지에 렌더링되는 컴포넌트를 추적하여 필요한 스타일만을 자동으로 삽입해줍니다. 이것은 code splitting 과 함께 최소한의 코드만을 로드한다는 것을 의미합니다.</li>\n<li><strong>No class name bugs</strong>: styled-components 는 스타일에 대한 고유한 클래스명을 생성하기 때문에 중복이나 맞춤법 오류등을 신경 쓸 필요가 없습니다.</li>\n<li><strong>Easier deletion of CSS</strong>: 일반 CSS 는 클래스 이름이 코드의 어딘가에서 사용되는지 알기가 어려울 수 있습니다. styled-components 는 모든 스타일이 컴포넌트에 연결되므로 사용되지 않는 컴포넌트가 삭제되면 해당 컴포넌트의 스타일도 함께 삭제됩니다.</li>\n<li><strong>Simple dynamic styling</strong>: 수십개의 클래스를 수동으로 관리할 필요가 없이 props 나 global theme 를 기반으로 컴포넌트의 스타일을 조정하는것이 간단하고 직관적입니다.</li>\n<li><strong>Painless maintenance</strong>: 컴포넌트에 영향을 미치는 스타일을 찾기 위해 여러 파일을 찾아다닐 필요가 없으므로 코드베이스가 아무리 커지더라도 유지관리 하기가 쉽습니다.</li>\n<li><strong>Automatic vendor prefixing</strong>: 현재 표준에 따라 CSS 를 작성하면 styled-components 가 알아서 나머지를 처리하도록 합니다.</li>\n</ul>\n</li>\n</ul>\n<h1>tagged template literals</h1>\n<hr>\n<ul>\n<li>styled-components 에서 사용한다는 tagged template literals 문법이란 ES6 의 템플릿 문자열(template literals)을 발전시킨 하나의 형태입니다.</li>\n<li>tagged template literals 를 사용하면 템플릿 문자열을 함수로 파싱을 할 수가 있습니다.</li>\n<li>태그 함수의 첫번째 인수는 문자열 값의 배열을 포함하며 나머지 인수는 표현식과 관련됩니다.</li>\n<li>tagged template literals 를 사용하는 예제 코드는 아래와 같습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> personExp<span class=\"token punctuation\">,</span> ageExp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> str0 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"that \"</span>\n  <span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" is a \"</span>\n\n  <span class=\"token comment\">// 사실 이 예제의 string에서 표현식이 두 개 삽입되었으므로</span>\n  <span class=\"token comment\">// ${age} 뒤에는 ''인 string이 존재하여</span>\n  <span class=\"token comment\">// 기술적으로 strings 배열의 크기는 3이 됩니다.</span>\n  <span class=\"token comment\">// 하지만 빈 string이므로 무시하겠습니다.</span>\n  <span class=\"token comment\">// var str2 = strings[2];</span>\n\n  <span class=\"token keyword\">var</span> ageStr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ageExp <span class=\"token operator\">></span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'centenarian'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'youngster'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 심지어 이 함수내에서도 template literal을 반환할 수 있습니다.</span>\n  <span class=\"token keyword\">return</span> str0 <span class=\"token operator\">+</span> personExp <span class=\"token operator\">+</span> str1 <span class=\"token operator\">+</span> ageStr<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> myTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">that </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> person <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// that Mike is a youngster</span></code></pre></div>\n<ul>\n<li>또한 아래와 같이 나머지 인수를 rest 문법을 사용해 이용 할 수도, 파싱 함수 내에서 string 이 아닌 다른 값을 반환할 수도 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">template</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    keys<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> values<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> dict<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> t1Closure <span class=\"token operator\">=</span> template<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">t1Closure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"YAY!\"</span>\n<span class=\"token keyword\">var</span> t2Closure <span class=\"token operator\">=</span> template<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'foo'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">t2Closure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>foo<span class=\"token operator\">:</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"Hello World!\"</span></code></pre></div>\n<h1>Installation</h1>\n<hr>\n<ul>\n<li>styled-components 를 사용하기에 앞서 아래 명령어를 통해 의존성 설치를 진행합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"># <span class=\"token keyword\">with</span> npm\nnpm i styled<span class=\"token operator\">-</span>components\n\n# <span class=\"token keyword\">with</span> yarn\nyarn add styled<span class=\"token operator\">-</span>components</code></pre></div>\n<h1>Getting Started</h1>\n<hr>\n<ul>\n<li>아래와 같이 스타일을 적용 한 컴포넌트를 작성 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>section<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  padding: 4em;\n  background: papayawhip;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위에서 이야기했다시피 styled-components 는 tagged template literals 를 이용해서 스타일을 정의합니다.</li>\n<li>styled.{tagName}<code class=\"language-text\">{style}</code> 방식으로 원하는 태그에 스타일을 적용시킨 스타일 컴포넌트를 정의하고 사용 할 수 있습니다.</li>\n</ul>\n<h1>Adapting based on props</h1>\n<hr>\n<ul>\n<li>styled-components 의 강점중 하나는 스타일 컴포넌트에 props 를 사용 할 수 있다는 점입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>primary <span class=\"token operator\">?</span> <span class=\"token string\">\"palevioletred\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>primary <span class=\"token operator\">?</span> <span class=\"token string\">\"white\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"palevioletred\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Normal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">primary</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Normal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위처럼 스타일 컴포넌트의 props 로 전달 한 값을 이용해 스타일을 조정 할 수 있습니다.</li>\n</ul>\n<h1>Extending Styles</h1>\n<hr>\n<ul>\n<li>또한 다른 스타일 컴포넌트를 이어받아 확장하는 방법도 제공하고 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background: white;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> TomatoButton <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: tomato;\n  border-color: tomato;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Normal Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TomatoButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Tomato Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TomatoButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이렇게 기존의 스타일 컴포넌트의 일부만 변경을 원하는 경우 기존의 스타일 컴포넌트를 확장하는 새로운 컴포넌트를 정의해 사용 할 수 있습니다.</li>\n<li>또 경우에 따라 스타일 컴포넌트가 렌더링하는 태그만을 변경하고 싶은 경우가 있을 수 있습니다.\n<ul>\n<li>예를 들어 a 태그와 button 태그가 함께 사용되지만 동일한 스타일을 유지해야 하는 경우가 있을 수 있습니다.</li>\n</ul>\n</li>\n<li>이런 경우 “as” 라는 prop 을 이용해 스타일 컴포넌트의 태그를 변경하여 렌더링 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background: white;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Normal Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Link with Button Styles\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Styling any component</h1>\n<hr>\n<ul>\n<li>styled 함수는 스타일 컴포넌트 뿐만 아니라 일반적인 컴포넌트도 확장하여 스타일을 추가할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">WrapperComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> StyledWrapperComponent <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>WrapperComponent<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: palevioletred;\n  font-weight: bold;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrapperComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Unstyled</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">WrapperComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledWrapperComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">styled</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledWrapperComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Passed props</h1>\n<hr>\n<ul>\n<li>만일 스타일 컴포넌트의 대상이 단순 요소(예. styled.div)일 경우에는 스타일 컴포넌트는 알려져있는 모든 HTML DOM attribute 는 스타일 컴포넌트를 통과시켜 실제 태그에 전달합니다.</li>\n<li>만일 스타일 컴포넌트의 대상이 리액트 컴포넌트(예. styled(MyComponent))일 경우에는 모든 props 를 통과시켜 리액트 컴포넌트에 전달합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Input <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>input<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  padding: 0.5em;\n  margin: 0.5em;\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>inputColor <span class=\"token operator\">||</span> <span class=\"token string\">\"palevioletred\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">inputColor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rebeccapurple<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Define Styled Components outside of the render method</h1>\n<hr>\n<ul>\n<li>스타일 컴포넌트는 컴포넌트 객체 외부에 정의하는것이 중요합니다.</li>\n<li>스타일 컴포넌트를 컴포넌트 객체 내부에 정의 할 경우 리렌더링이 일어날 때 마다 스타일 컴포넌트를 재생성 하게 되고, 이는 캐싱이 중단되고 렌더링 속도가 크게 느려지므로 피해야 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Wrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// WARNING: THIS IS VERY VERY BAD AND SLOW, DO NOT DO THIS!!!</span>\n  <span class=\"token keyword\">const</span> StyledWrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    /* ... */\n  </span><span class=\"token template-punctuation string\">`</span></span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledWrapper</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Attaching additional props</h1>\n<hr>\n<ul>\n<li>불필요한 래퍼 방지를 위해 .attrs 생성자를 사용 할 수 있습니다.</li>\n<li>반환 값은 결과의 props 에도 병합됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Input <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">attrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">\"1em\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: palevioletred;\n  font-size: 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  margin: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  padding: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A small text input<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A bigger text input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2em<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>attrs 또한 overriding 이 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Input <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">attrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">\"1em\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 2px solid palevioletred;\n  margin: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  padding: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> PasswordInput <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 2px solid aqua;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A bigger text input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2em<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PasswordInput</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A bigger password input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2em<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Animations</h1>\n<hr>\n<ul>\n<li>@keyframe이 포함된 CSS 애니메이션은 단일 컴포넌트로 범위가 지정되지는 않지만 이름 충돌을 피하기 위해 전역으로 범위가 지정되는 것은 원하지 않습니다.</li>\n<li>때문에 애플리케이션 전체에서 사용 할 수 있는 고유한 인스턴스를 생성하는 keyframes helper 를 내보냅니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> keyframes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rotate <span class=\"token operator\">=</span> keyframes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg)\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Rotate <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  display: inline-block;\n  animation </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotate<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 2s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 1.2rem;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rotate</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&amp;lt; 💅🏾 &amp;gt;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Rotate</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Keyframes 는 lazily injected 가 되며, 이는 코드 분할이 가능해지기 때문에 공유 스타일을 사용할 경우 css helper 를 사용해야 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> keyframes<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rotate <span class=\"token operator\">=</span> keyframes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// ❌ This will throw an error!</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  animation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotate<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 2s linear infinite;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// ✅ This will work as intended</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  animation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotate<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 2s linear infinite;\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<h1>느낀점</h1>\n<hr>\n<ul>\n<li>저는 사실 컴포넌트 로직과 스타일을 하나의 파일에서 관리하는 것이 좋은 방법이라고 생각하지는 않습니다.</li>\n<li>컴포넌트 로직과 스타일은 관심사가 다르기 때문에 분리가 돼야한다고 생각합니다.\n<ul>\n<li>이는 개인적인 생각으로 관심사를 JS, CSS, HTML 로 분리하는것이 아니라 컴포넌트 단위로 분리해야 한다는 이야기가 틀린 이야기라고 생각하는 것은 아닙니다.</li>\n<li>하지만 컴포넌트 내에서도 로직과 스타일은 관심사가 다르다고 생각하여 분리하는게 더 좋은 방법이라고 생각합니다.</li>\n</ul>\n</li>\n<li>물론 props 등을 이용한 dynamic styling 이나 최소한의 스타일만을 로드하는 Automatic critical CSS 등은 CSS-in-JS 의 큰 장점인 것 같습니다.</li>\n<li>하지만 그 외에 CSS-in-JS 가 이점으로 내새우는 부분들, Vjeux 가 CSS 의 문제점이라고 이야기 한 부분들의 대부분은 CSS Modules 와 Sass 를 함께 이용하면 해결 할 수 있는 부분이라고 생각합니다.</li>\n<li>또한 성능면에서도 상태에 따라 JS 를 파싱해 새로운 CSS 코드를 생성해야 하는 CSS-in-JS 에 비해 전처리를 통해 생성한 CSS 파일만을 이용하는 CSS Modules + Sass 를 이용한 방식이 더 나은 퍼포먼스를 보여주는 것으로 알고 있습니다.</li>\n<li>그러니 CSS-in-JS 가 유행이라고 무조건 사용하는 것이 아닌 본인의 상황에서 더 좋은 방법을 생각해보고 필요한 기술을 적절히 사용해야 할 것 같습니다.</li>\n<li>개인적으로 styled-components 를 사용하면 JSX 템플릿 코드에 사용되는 스타일 컴포넌트와 일반 컴포넌트의 구분이 어려워서 코딩할 때 오히려 불편함이 생기지는 않을지 하는 생각이 들었습니다.</li>\n<li>이 부분은 제가 개인적인 프로젝트에서라도 실제로 조금 더 사용을 해보고 직접 느껴봐야 할 것 같습니다.</li>\n</ul>\n<h2>이후 작성 할 내용</h2>\n<hr>\n<ol>\n<li>motion</li>\n<li>Sass(Scss)</li>\n</ol>\n<h2>참고 자료</h2>\n<hr>\n<ul>\n<li><a href=\"https://styled-components.com/docs/basics\">styled-components 공식 문서</a></li>\n<li><a href=\"https://medium.com/@okys2010/%EB%AA%A8%EB%8D%98-css-1-css-in-js-c1c53d9bbbc9\">모던 CSS : 1. CSS-in-JS</a></li>\n<li><a href=\"https://blueshw.github.io/2020/09/14/why-css-in-css/\">CSS-in-JS에서 CSS-in-CSS로 바꿔야 하는 이유</a></li>\n</ul>","frontmatter":{"title":"styled-components","date":null,"description":"CSS-in-JS 와 Styled Components 에 대해 알아봅니다."}},"previous":{"fields":{"slug":"/obsidian-git/"},"frontmatter":{"title":"Obsidian Git 을 이용하여 무료로 맥북과 아이폰간의 데이터 동기화하기"}},"next":null},"pageContext":{"id":"93fc75a0-cb96-5d93-94f7-2e39a4cebdda","previousPostId":"6b070a98-4996-5592-949c-bb077754e79f","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}